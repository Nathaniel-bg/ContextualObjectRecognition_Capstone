# -*- coding: utf-8 -*-
"""GPS_Ellipse_Capstone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jWQl3q-yLgPYfbmOjx2SQG9_PLyzXKTs
"""

# Oringial Code contributed by ChitraNayal

#GPS Elipse Calculator Capstone
import math
 
# Function to check the point
def downtown_gps_checkpoint(x, y):
 
    # checking the equation of ellipse with the given point
    p = ((math.pow((x - (-75.700218)), 2) / math.pow(0.007475, 2)) 
    + (math.pow((y - 45.418449), 2) / math.pow(0.00525, 2)))
    print (p)
    return p

def suburbs_gps_checkpoint(x, y):
 
    # checking the equation of ellipse with the given point
    p = ((math.pow((x - (-75.758594)), 2) / math.pow(0.038283, 2)) 
    + (math.pow((y - 45.351146), 2) / math.pow(0.026914, 2)))
    print (p)
    return p

def rural_gps_checkpoint(x, y):
 
    # checking the equation of ellipse with the given point
    p = ((math.pow((x - (-75.76332)), 2) / math.pow(0.024902, 2)) 
    + (math.pow((y - 45.306633), 2) / math.pow(0.017542, 2)))
    print (p)
    return p    

# Driver code
if __name__ == "__main__":
 
 #Random GPS Data to Test Against Ellipse  

    # Rural
    y = 45.301837
    x = -75.773590

    # Suburbs
    y =  45.358991
    x = -75.736698
 
    # Downtown
    y =  45.415686
    x = -75.703845

    # Outside
    y =  45.374985
    x = -75.719578

    if (downtown_gps_checkpoint(x, y) <= 1):
      print ("Inside Downtown")

    elif (suburbs_gps_checkpoint(x, y) <= 1):
      print ("Inside Suburbs")

    elif (rural_gps_checkpoint(x, y) <= 1):
      print ("Inside Rural")

    else:
      print ("Outside")

